#include <iostream>
#include <vector>
using namespace std;
struct nodo {
	int v ;
	nodo* nodos[2];
	int altura;
	nodo(int x, int h) {
		v = x;
		altura = h;
		nodos[0] = nodos[1] = NULL;
	}
};
struct avl {
	nodo* root=NULL;
	bool find(int n, nodo**& p, vector<nodo**> &v);
	void ins(int n);
	void print(nodo *);
};
bool avl::find(int n, nodo**& p, std::vector<nodo**> &v) {
	p = &root;
	for (;*p && (*p)->v != n; p = &(*p)->nodos[(*p)->v < n]) {
		v.push_back(p);
	}
	if (*p && (*p)->v == n) {
		return 1;
	}
	else
		return 0;
}

void avl::ins(int n) {
	nodo** p;
	vector<nodo**> v;
	int dif=0;
	if (!find(n, p, v)) {
		*p = new nodo(n, 1);
		for (int i = v.size() - 1;i >= 0;i--) {
			(*v[i])->altura++;
			if ((*v[i])->nodos[0] && (*v[i])->nodos[1]) 
				dif = (*v[i])->nodos[0]->altura - (*v[i])->nodos[1]->altura;			
			else if ((*v[i])->nodos[0]) 
				dif = (*v[i])->nodos[0]->altura;			
			else if ((*v[i])->nodos[1]) 
				dif = -(*v[i])->nodos[1]->altura;			
			if (dif == 2 || dif == -2) {
				if ((*v[i])->v > (*v[i + 1])->v) {
					if ((*v[i + 1])->v > (*p)->v) {
						nodo* tmp = (*v[i]);
						nodo* tmp2 = (*v[i + 1])->nodos[1];

						*v[i] = *(v[i + 1]);
						(*v[i])->nodos[1] = tmp;
						tmp->nodos[0] = tmp2;
						tmp->altura = tmp->altura - 2;
					}
					else {
						nodo* tmp = (*p)->nodos[0];
						nodo* tmp2 = (*p)->nodos[1];
						nodo* tmp3 = *v[i];
						*v[i] = *p;
						(*v[i])->altura = (*v[i])->altura +1;
						(*v[i])->nodos[0] = *v[i + 1];
						(*v[i])->nodos[0]->altura = (*v[i])->nodos[0]->altura -1;
						(*v[i])->nodos[1] = tmp3;
						(*v[i])->nodos[1]->altura = (*v[i])->nodos[1]->altura - 2;
						tmp3->nodos[0] = tmp2;
						(*v[i + 1])->nodos[1] = tmp;
					}
				}
				else {
					if ((*p)->v > (*v[i])->v) {
						nodo* tmp = (*v[i]);
						nodo* tmp2 = (*v[i + 1])->nodos[0];
						*v[i] = *(v[i + 1]);
						(*v[i])->nodos[0] = tmp;
						(*v[i])->nodos[0]->altura = (*v[i])->nodos[0]->altura - 2;
						(*v[i])->nodos[0]->nodos[1] = tmp2;

					}
					else {
						nodo* tmp = (*v[i]);
						nodo* tmp2 = (*p)->nodos[0];
						nodo* tmp3 = (*p)->nodos[1];
						*v[i] = *p;
						(*p)->altura = (*v[i])->altura+1;
						(*p)->nodos[0] = tmp;
						(*p)->nodos[0]->altura = (*p)->nodos[0]->altura -1;
						(*p)->nodos[1] = *v[i + 1];
						(*p)->nodos[1]->altura = (*p)->nodos[1]->altura - 2;
						(*p)->nodos[0]->nodos[1] = tmp2;
						(*p)->nodos[1]->nodos[0] = tmp3;
					}
				}
			}
		}
	}
		
}

void avl::print(nodo* n) {
	if (!n)
		return;
	print(n->nodos[0]);
	cout << n->v <<' ' << n->altura <<'\n';
	print(n->nodos[1]);
}
int main() {
	avl a;
	for(int i = 0 ; i<5; i++)
		a.ins(i);

	a.print(a.root);

}
