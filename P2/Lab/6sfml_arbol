#include <SFML/Graphics.hpp>
#include <iostream>
#include <vector>
#include <map>

using namespace std;

class nodo {
public:
    nodo(int n, nodo* n1, nodo* n2) {
        v = n;
        nodes[0] = n1;
        nodes[1] = n2;
    }
    int v;
    nodo* nodes[2];

};
class Btree {
public:
    Btree() {
        h = NULL;
        b = 0;
    }
    nodo* h;
    bool b;
    bool find(int n, nodo**& p) {
        p = &h;
        while (*p && (*p)->v != n)
            p = &((*p)->nodes[(*p)->v < n]);
        if (*p && (*p)->v == n)
            return 1;
        else {
            return 0;
        }
    }

    void insert(int n) {
        nodo** p = &h;
        if (!find(n, p)) {
            *p = new nodo(n, NULL, NULL);
        }
    }
    void remove(int n) {
        nodo** p = &h;
        if (find(n, p)) {
            if ((*p)->nodes[0] && (*p)->nodes[1]) {
                nodo** q = &((*p)->nodes[b]);
                for (;(*q)->nodes[!b];q = &((*q)->nodes[!b]));
                b = !b;
                (*p)->v = (*q)->v;
                p = q;
            }
            nodo* t = *p;
            *p = (*p)->nodes[(*p)->nodes[0] == 0];
            delete t;
        }

    }
};

// Vectores para almacenar los recorridos
vector<int> v1;
vector<int> v2;

// Funciones para realizar los recorridos y llenar los vectores
void Preorder(nodo* nodo) {
    if (nodo == nullptr) return;
    v2.push_back(nodo->v);
    Preorder(nodo->nodes[0]);
    Preorder(nodo->nodes[1]);
}

void Inorder(nodo* nodo) {
    if (nodo == nullptr) return;
    Inorder(nodo->nodes[0]);
    v1.push_back(nodo->v);
    Inorder(nodo->nodes[1]);
}

map<int, pair<int, int>> posiciones;

void asignarPosiciones(nodo* nodo) {
    if (nodo == nullptr) return;
    int x = find(v1.begin(), v1.end(), nodo->v) - v1.begin();
    int y = find(v2.begin(), v2.end(), nodo->v) - v2.begin();
    posiciones[nodo->v] = { x * 50, y * 50 };  

    asignarPosiciones(nodo->nodes[0]);
    asignarPosiciones(nodo->nodes[1]);
}

void dibujarArbol(sf::RenderWindow& window, nodo* nodo, sf::Font& font) {
    if (nodo == nullptr) return;


    pair<int, int> pos = posiciones[nodo->v];
    int x = pos.first;
    int y = pos.second;

    sf::CircleShape circulo(20);
    circulo.setFillColor(sf::Color::Cyan);
    circulo.setOutlineColor(sf::Color::Black);
    circulo.setOutlineThickness(2);
    circulo.setPosition(x, y);
    sf::Text text(to_string(nodo->v), font, 16);
    text.setFillColor(sf::Color::Black);
    text.setPosition(x + 10, y + 5);

    if (nodo->nodes[0] != nullptr) {
        pair<int, int> posIzq = posiciones[nodo->nodes[0]->v];
        sf::Vertex line[] = {
            sf::Vertex(sf::Vector2f(x + 20, y + 20), sf::Color::Black),
            sf::Vertex(sf::Vector2f(posIzq.first + 20, posIzq.second), sf::Color::Black)
        };
        window.draw(line, 2, sf::Lines);
        dibujarArbol(window, nodo->nodes[0], font);
    }
    if (nodo->nodes[1] != nullptr) {
        pair<int, int> posDer = posiciones[nodo->nodes[1]->v];
        sf::Vertex line[] = {
            sf::Vertex(sf::Vector2f(x + 20, y + 20), sf::Color::Black),
            sf::Vertex(sf::Vector2f(posDer.first + 20, posDer.second), sf::Color::Black)
        };
        window.draw(line, 2, sf::Lines);
        dibujarArbol(window, nodo->nodes[1], font);
    }

    window.draw(circulo);
    window.draw(text);
}
void mostrarArbol(Btree& arbol) {
    sf::RenderWindow window(sf::VideoMode(800, 600), "AED-sfml");
    sf::Font font;
    if (!font.loadFromFile("arial.ttf")) {
        return;
    }

    Inorder(arbol.h);
    Preorder(arbol.h);
    asignarPosiciones(arbol.h);

    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();
        }
        window.clear(sf::Color::White);


        dibujarArbol(window, arbol.h, font);

        window.display();
    }
}

int main() {
    Btree arbol;
    arbol.insert(5);
    arbol.insert(6);
    arbol.insert(3);
    arbol.insert(7);
    arbol.insert(8);



    mostrarArbol(arbol);

    return 0;
}
