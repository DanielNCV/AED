#include <iostream>
template <class T>
class Asc {
public:
    bool operator() (int a, int b) {
        return a < b;
    }
};

template <class T>
class Des {
public:
    bool operator() (int a, int b) {
        return a > b;
    }
};

template<class T>
struct nodo {
    T valor[5];
    nodo<T>* next;
    T* top;
    nodo(T v, nodo<T>* n = NULL) {
        valor[0] = v;
        top= &valor[0];
        next = n;
    }
};

template<class T, class O>
struct LE{
    nodo<T>* head= NULL;
    O op;
    void ADD(T v) {
        nodo<T>** p;
        T* q;
        if (!find(v, p,q)) {
            if(!(*p))
                *p = new nodo<T>(v);           
            else{             
                for (; *p  ; p = &(*p)->next){
                    q=&(*p)->valor[0];
                    for(;q<=(*p)->top ;q++){ 
                        int tmp= *q;
                        *q=v;
                        v=tmp;
                        if(q==&(*p)->valor[4]){
                            continue;
                        }
                        if(!(*p)->next && q==&(*p)->valor[4]){
                            nodo<T>* t= new nodo<T>(v);
                            (*p)->next=t;
                            break;
                        }
                        (*p)->top++;
                    }
                } 
            }         
        }
    }
    void DEL(T v) {
        nodo<T>** p;
        T* q;
        if (find(v, p,q)) {
            nodo<T>* tmp =  *p;
            *p = (*p)->next;
            delete tmp;
        }
    }
    bool find(T v, nodo<T>**& pos, T* &q) {
        pos = &head;
        for (; *pos && op((*pos)->valor[0], v); pos = &(*pos)->next){
            q=&(*pos)->valor[0];
            for(;q<(*pos)->top && op(*q, v);q++){                
            }
        }        
        if (*pos && *q == v)
            return true;
        else
            return false;
    }
    void print() {
        std::cout << "head->";
        for (nodo<T>* p = head; p; p = p->next) {
            std::cout << "[";
            T* q = &p->valor[0];
            for (; q <= p->top; q++) {
                std::cout << p->valor << ", ";
            }
            std::cout<< "] ->";
    
        }
    
        std::cout << "null\n";
    }
};

int main()
{

    LE<char, Asc<char>> listita;
    listita.ADD('r');
    listita.ADD('g');
    listita.ADD('h');
    listita.ADD('j');
    listita.ADD('f');
    listita.print();
    //listita.DEL('h');
    listita.print();

}
