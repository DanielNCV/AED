#include <iostream>
class Cvector {
public:
    int* ar;
    int* cola;
    int* fin;
    Cvector(int n) {
        ar = new int[n];
        fin = (ar + n);
        cola = NULL;
    }
    void push_back(int n ) {
        if (cola == NULL) {
            *ar = n;
            cola = ar;
        }
        else if (cola < fin) {
            cola++;
            *cola = n;            
        }
        else
            return;
            
    }
    void pop_back(int &a) {
        if (cola) {
            if (cola == ar) {
                a = *cola;
                cola = NULL;
            }
            else {
                a = *cola;
                cola--;
            }
        }
        else
            return;           
    }
    void push_front(int n) {
        if (!cola) {
            *ar = n;
            cola = ar;
        }
        else {
            if (cola != fin) {
                int a ;
                for (int* p = ar;p <= fin; p++) {
                    a = *p;
                    *p = n;
                    n = a;
                }
            }
        }
    }
    void pop_front(int& a) {
        if (cola) {
            if (cola == ar) {
                a = *cola;
                cola = NULL;
            }
            else {
                a = *ar;
                int n;
                for (int* p = ar, *q = ar+1;p <=cola; p++,q++) {
                    *p = *q;
                }
                cola--;
            }
        }
    }
    int& operator []( int n ) {
        int b = *(ar + n);
        return *(ar + n);
    }
};
class Deque {
public:
    Deque() {
        m = new int* [k1]; // tam del mapa
        i = m + (5 - 1) / 2;
        *i = new int[k2]; // tam de hijos
        f = i;
        ini = NULL;
        fin = NULL;
    }
    int k1 = 5;
    int k2 = 5;
    int** m;
    int** i;
    int** f;
    int* ini;
    int* fin;

    void push_back(int n) {         
        if (ini) {
            if (fin!= *f +(5-1)) {
                fin++;
                *fin = n;
            }
            else {
                if (f != m + k1 - 1) {
                    f++;
                    *f = new int[k2];
                    fin = *f;
                    *fin = n;
                }
                else {
                    k1 = k1 * 2;
                    int** tmp = new int* [k1];
                    int** pp = tmp + (k1) / 2;
                    int** t;
                    for (t = i;t <= f;t++, pp++)
                        *pp = *t;
                    m = tmp;
                    i = tmp + (k1) / 2;
                    f = pp - 1;
                    *f = new int[k2];
                    fin = *f;
                    *fin = n;

                }
            }
        }
        else {
            ini = *i + (5 - 1)/2 ;
            *ini = n;
            fin = ini;
        }
        
    }
};
int main()
{
    int b;
    Cvector v(6);
    v.push_back(2);
    v.push_back(4);
    v.push_back(8);
    v.push_front(3);

    std::cout << v[0] << "\n";
    std::cout << v[1] << "\n";
    std::cout << v[2] << "\n";
    std::cout << v[3] << "\n";
    std::cout << v[4] << "\n";
    std::cout << v[5] << "\n";
    v.pop_front(b);
    
    std::cout << v[0] << "\n";
    std::cout << v[1] << "\n";
    std::cout << v[2] << "\n";
    std::cout << v[3] << "\n";
    std::cout << v[4] << "\n";
    std::cout << v[5] << "\n";
    std::cout << b << "\n";




}
