#include <iostream>
using namespace std;

class XVector
{
public:
    XVector(int size_map, int size_vec);
    ~XVector();
    void push_back(int n);
    void push_front(int n);
    int operator[](int n) const;
    int** map;
    int size_map, size_vec;
    int* fin;
    int** fin_m;
    int size;
};

XVector::XVector(int sm, int sv)
{
    size_map = sm;
    size_vec = sv;
    map = new int* [sm];
    *map = new int[sv];
    fin_m = map;
    fin = *map;
    size = 0;
}
void XVector::push_back(int n) {
    if (fin_m < map + size_map - 1) {
        if (fin < *fin_m + size_vec - 1) {
            *fin = n;
            fin++;
            size++;
        }
        else {
            *fin = n;
            fin_m++;
            *fin_m = new int[size_vec];
            fin = *fin_m;
            size++;

        }
    }
    else {
        int** tmp = new int* [size_map * 2];
        int** tmp1 = tmp;     
        for (int** p = map;p <= fin_m;p++, tmp1++)
            *tmp1 = *p;
        int** tmp2 = map;
        fin_m = tmp1-1;
        *fin = n;
        fin++;
        size++;
        size_map = size_map * 2;
        map = tmp;
        delete[] tmp2;
    }
}
void XVector::push_front(int n) {
    
}
XVector::~XVector()
{

}

int XVector::operator[](int n) const{
    int** p = map;
    int a = n / size_vec;
    int b = n % size_vec;
    return *(*(p + a) + b);

}
void print(XVector* p)
{ //no modificar esta función
    for (int i = 0; i < p->size; i++)
        std::cout << (*p)[i] << " ";
    std::cout << "\n";
}

int main()
{
    //no modificar esta función main

    XVector v(2, 3);

    v.push_back(3); v.push_back(8); v.push_back(1);
    v.push_back(4); v.push_back(9); v.push_back(6);
    v.push_back(7);
    print(&v);
    /*
    v.push_front(5); v.push_front(2);
    print(&v);
    v.push_front(11); v.push_front(17);
    v.push_back(22);
    print(&v);
    v.push_front(33); v.push_back(77);
    print(&v);
    */

}
